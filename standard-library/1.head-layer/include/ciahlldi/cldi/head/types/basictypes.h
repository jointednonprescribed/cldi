
#ifndef _cldi_head__types_BASICTYPES_H
#define _cldi_head__types_BASICTYPES_H 1

#include "../setup.h"
#include "../NS_DECL.hpp"



/* --------------------------------------------------------------------------- */
/* Basic word types. */
typedef char        cldibyte;
typedef signed char cldisbyte;
#if __CLDI_ARCHSIZE < CLDI_PLATFORM_64BIT
	typedef uintmax_t cldiword;
	typedef  intmax_t cldisword;
	#define CLDI_WORD_SIZE 4
	#define CLDI_WORD_MAX  +4294967296UL
	#define CLDI_SWORD_MAX +2147483647L
	#define CLDI_SWORD_MIN -2147483648L
	typedef uint16_t  cldihalf;
	typedef  int16_t  cldishalf;
	#define CLDI_HALF_SIZE 2
	#define CLDI_HALF_MAX  +65536U
	#define CLDI_SHALF_MAX +32767
	#define CLDI_SHALF_MIN -32768
#else
	typedef uintmax_t cldiword;
	typedef  intmax_t cldisword;
	#define CLDI_WORD_SIZE 8
	#define CLDI_WORD_MAX  +18446744073709551616UL
	#define CLDI_SWORD_MAX +9223372036854775807L
	#define CLDI_SWORD_MIN -9223372036854775808L
	typedef uint16_t  cldihalf;
	typedef  int16_t  cldishalf;
	#define CLDI_HALF_SIZE 4
	#define CLDI_HALF_MAX  +4294967296U
	#define CLDI_SHALF_MAX +2147483647
	#define CLDI_SHALF_MIN -2147483648
#endif

/* Specific word sizes --Commented out because developers should use C/C++ provided uint and int types.
typedef uint8_t  u8_t;
typedef  int8_t  i8_t;
typedef uint16_t u16_t;
typedef  int16_t i16_t;
typedef uint32_t u32_t;
typedef  int32_t i32_t;
typedef uint64_t u64_t;
typedef  int64_t i64_t; */
#define CLDI_U8_MAX +256U
#define CLDI_I8_MAX +127
#define CLDI_I8_MIN -128
#define CLDI_U16_MAX +65536U
#define CLDI_I16_MAX +32767
#define CLDI_I16_MIN -32768
#define CLDI_U32_MAX +4294967296UL
#define CLDI_I32_MAX +2147483647L
#define CLDI_I32_MIN -2147483648L
#define CLDI_U64_MAX +18446744073709551616UL
#define CLDI_I64_MAX +9223372036854775807L
#define CLDI_I64_MIN -9223372036854775808L


/* --------------------------------------------------------------------------- */
/* Unsigned and signed size types. --Commented out because developers should use C/C++ provided size_t and ssize_t types.
typedef uintmax_t size_t;
typedef  intmax_t ssize_t; */
#if __CLDI_ARCHSIZE < CLDI_PLATFORM_64BIT
	#define CLDI_ULLONG_MAX CLDI_U64_MAX
	#define CLDI_LLONG_MAX  CLDI_I64_MAX
	#define CLDI_LLONG_MIN  CLDI_I64_MIN
	#define CLDI_SIZE_MAX   CLDI_U64_MAX
	#define CLDI_SSIZE_MIN  CLDI_I64_MIN
	#define CLDI_SSIZE_MAX  CLDI_I64_MAX
#else
	#define CLDI_ULLONG_MAX CLDI_U32_MAX
	#define CLDI_LLONG_MAX  CLDI_I32_MAX
	#define CLDI_LLONG_MIN  CLDI_I32_MIN
	#define CLDI_SIZE_MAX   CLDI_U32_MAX
	#define CLDI_SSIZE_MIN  CLDI_I32_MIN
	#define CLDI_SSIZE_MAX  CLDI_I32_MAX
#endif

/* Maximum precision floating-point type */
#if __CLDI_ARCHSIZE > CLDI_PLATFORM_32BIT && __CLDI_use_extended_double > false
typedef long double cldifloatmax_t;
#else
typedef double cldifloatmax_t;
#endif

/* Size type for length of pathname strings. */
#if FILENAME_MAX <= CLDI_I8_MAX
typedef   signed char      cldisfnamemax_t;
typedef unsigned char      cldifnamemax_t;
#elif FILENAME_MAX <= __INT_MAX__
typedef   signed int       cldisfnamemax_t;
typedef unsigned int       cldifnamemax_t;
#elif FILENAME_MAX <= __LONG_MAX__
typedef   signed long      cldisfnamemax_t;
typedef unsigned long      cldifnamemax_t;
#else
typedef   signed long long cldisfnamemax_t;
typedef unsigned long long cldifnamemax_t;
#endif


/* --------------------------------------------------------------------------- */
/* Signed 32-bit numeric type for representing error codes and success states. */
typedef int32_t __cldistat_t, cldistat_t;
typedef enum _CLDISTAT
{
	/* CLDI_SUCCESS must always be 0, as any other value always signifies error code. */
	CLDI_SUCCESS = 0,
	/* Method has no implementation, do not use it. */
	CLDI_NOIMPL,
	/* Ran out of memory while trying to execute this method. */
	CLDI_NOMEM,

	/* Method failed due to unidentified failure in a subsequent method executed
	.  within its code. */
	CLDI_FAILED_SUBROUTINE,
	/* One or more arguments were passed with a far too extensive
	.  value to be handled. */
	CLDI_OVERLOADED_ARG,
	/* One or more objects that were passed to or generated by  this method contained
	.  a far too extensive value to be handled. */
	CLDI_OVERLOADED_ATTR,
	/* One or more required arguments were passed as a null value (0, NULL, or a
	.  collection of NULLs inside of a struct that constitutes 'NULL' for that object). */
	CLDI_NULL_ARG,
	/* One or more attrbutes of an object generated by or passed to this method
	.  was invalid in some way. */
	CLDI_NULL_ATTR,
	/* One or more passed arguments are invalid in some way. */
	CLDI_INVALID_ARG,
	/* One or more attributes of an object generated by or passed to this method, or passed to it,
	.  was invalid in some way. */
	CLDI_INVALID_ATTRIBUTE,

} CLDISTAT;
/* This value will contain the error status of the previous function call,
.  must be set to success upon success to prevent reporting of old errors. */
CLDISTAT CLDI_LAST_ERR = CLDI_SUCCESS;


/* Process ID type */
typedef int32_t cldipid_t;



/* --------------------------------------------------------------------------- */
/* Extensions to the C++ namespace for declarations in this file */
#ifdef __cplusplus
namespace cldi
{
	using word = cldiword;
	using sword = cldisword;
	using half = cldihalf;
	using shalf = cldishalf;

	using floatmax_t = cldifloatmax_t;

	using __stat_t = __cldistat_t;
	using stat_t = __cldistat_t;
	using STAT = CLDISTAT;

	using pid_t = cldipid_t;
}
#endif



#endif /* _cldi_head__types_BASICTYPES_H */
