
#ifndef _cldi_head__math_GRAPHING_H
#define _cldi_head__math_GRAPHING_H 1

#include "../setup.h"

#if defined(__cplusplus) && __CLDI_no_cpp < true
#	include <cmath>
#else
#	include <math.h>
#endif



/* Graphing Tools */

/* 1-Dimensional Point, Ray, or Vector */
typedef struct CLDICOORD1D
{	/* x = left and right */
	double x;
	/* Whether or not this point is a ray, and which direction the ray points. */
	bool _mIsLine;
	/* The the extension length of the vector, if it is a vector, sign determines direction (- left, + right). */
	double _mVecSize;

#if defined(__cplusplus) && __CLDI_no_cpp < true
public:

	/* point:       is_line=false
	.  ray (right): is_line=true, vec_size=INFINITY
	.  ray (left):  is_line=true, vec_size=-INFINITY
	.  vector:      is_line=true, vec_size=<size-of-vector>
	.     where the sign determines left or right ^ */
	CLDICOORD1D(double x, bool is_line=false, double vec_size=INFINITY);
	CLDICOORD1D();

	operator CLDICOORD2D() const;
	operator CLDICOORD3D() const;
	operator CLDICOORD4D() const;

	CLDICOORD1D GetCopy() const;

	/* Get the absolute distance between this point and another. */
	double Distance(CLDICOORD1D from) const;
	/* Get the positive of negative difference between this point and another. */
	double Diff(CLDICOORD1D from) const;
	/* Check if this ray/vector is intersecting with another (ray/point/vector), if this
	.  object is a point, false will be the result. */
	bool   Intersecting(CLDICOORD1D with) const;
#endif
} cldiCoord1d, cldiRay1d, cldiVec1d;

/* 2-Dimensional Point, Ray, or Vector */
typedef struct CLDICOORD2D
{	/* x = left and right, y = near and far */
	double x, y;
	bool   _mIsLine;
	double _mVecSize;

#if defined(__cplusplus) && __CLDI_no_cpp < true
public:

	/* point:       is_line=false
	.  ray (right): is_line=true, vec_size=INFINITY
	.  ray (left):  is_line=true, vec_size=-INFINITY
	.  vector:      is_line=true, vec_size=<size-of-vector>
	.     where the sign determines left or right ^ */
 	CLDICOORD2D(double x, double y, bool is_line=false, double vec_size=INFINITY);
	CLDICOORD2D();

	operator CLDICOORD3D() const;
	operator CLDICOORD4D() const;

	CLDICOORD2D GetCopy() const;


	/* Get the absolute distance between this point and another. */
	double Distance(CLDICOORD2D from) const;
	/* Get the positive of negative difference between this point and another. */
	double Diff(CLDICOORD2D from) const;
	/* Check if this ray/vector is intersecting with another (ray/point/vector), if this
	.  object is a point, false will be the result. */
	bool   Intersecting(CLDICOORD2D with) const;
#endif
} cldiCoord2d, cldiRay2d, cldiVec2d;

/* 3-Dimensional Point, Ray, or Vector */
typedef struct CLDICOORD3D
{	/* x = left and right, y = near and far, z = up and down */
	double x, y, z;

#if defined(__cplusplus) && __CLDI_no_cpp < true
public:

	/* point:  direction=CLDI_POINT_ONLY,
	.  ray:    direction=<ray-direction>, vec_size=INFINITY,
	.  vector: direction=<ray-direction>, vec_size=<size-of-vector> */
	CLDICOORD3D(double x, double y, double z=0, cldiLineDirection direction=CLDI_POINT_ONLY, double vec_size=INFINITY);
	CLDICOORD3D();

	CLDICOORD3D GetCopy() const;


	/* Get the absolute distance between this point and another. */
	double Distance(CLDICOORD3D from) const;
	/* Get the positive of negative difference between this point and another. */
	double Diff(CLDICOORD3D from) const;
	/* Check if this ray/vector is intersecting with another (ray/point/vector), if this
	.  object is a point, false will be the result. */
	bool   Intersecting(CLDICOORD3D with) const;
#endif
} cldiCoord3D, cldiRay3D, cldiVec3D;

/* 4-Dimensional Point, Ray, or Vector */
typedef struct CLDICOORD4D
{	/* w = past and future, x = left and right, y = near and far, z = up and down */
	double w, x, y, z;
	/* P = pitch (angle up/back and down/forward), Y = yaw (angle left and right), WR = W Rotation (angle past and future) */
	double P, Y, WR;
	/* The function that could be used to generate coordinates from input values, the value of some double
	.  with its reference passed into the function being set to `NAN` (Not a number) should be the generally
	.  accepted sign that the argument is expected to be generated by the function, if the wrong arguments
	.  are "NAN'd out", and, as such, the function doesn't have the right input data, then the function can
	.  return an error code to indicate this problem, or any other error. */
	int (*_mFunc)(double*, double*, double*, double*);

#if defined(__cplusplus) && __CLDI_no_cpp < true
public:

	/* Construct as zero-point coordinate. */
	CLDICOORD4D(double x, double y, double z, double w);
	/* Construct as a ray. */
	CLDICOORD4D(double x, double y, double z, double w, double pitch, double yaw, double w_rot);
	/* Construct as a vector. */
	CLDICOORD4D(double x, double y, double z, double w, double vec_size, double pitch, double yaw, double w_rot);
	/* Construct as a function. */
	CLDICOORD4D(int (*function)(double*, double*, double*, double*));
	/* Construct null. */
	CLDICOORD4D();

	CLDICOORD4D GetCopy() const;

	/* Get the absolute distance between this point and another. */
	double Distance(CLDICOORD4D from) const;
	/* Get the positive of negative difference between this point and another. */
	double Diff(CLDICOORD4D from) const;
	/* Check if this ray/vector is intersecting with another (ray/point/vector), if this
	.  object is a point, false will be the result. */
	bool   Intersecting(CLDICOORD4D with) const;
#endif
} cldiCoord4D, cldiRay4D, cldiVec4D;


/* 1 Dimensional Graph (number line) */
typedef struct CLDIGRAPH1D
{
	size_t        _mCoordCount;
	cldiCoord1d * _mCoords;
} cldiNumLine, cldiGraph1d;

/* 2 Dimensional Graph */
typedef struct CLDIGRAPH2D
{
	size_t        _mCoordCount;
	cldiCoord2d * _mCoords;
} cldiGraph, cldiGraph2d;



#endif /* _cldi_head__math_GRAPHING_H */
